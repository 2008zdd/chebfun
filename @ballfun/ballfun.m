classdef ballfun
%ballfun   ballfun class for representing functions on [a,b]x[c,d]x[e,g].
%   Class for approximating functions defined on finite cuboids. The 
%   functions should be smooth.
%
%   ballfun(F) constructs a ballfun object representing the function F on
%   [-1, 1] x [-1, 1] x [-1, 1]. 
%
%   The input F may be one of the following three:
%   i)   A function handle like @(x,y,z) x.*y + cos(x).*z
%   ii)  A string like 'cos(x) + sin(x.*y.*z)'
%   iii) A discrete tensor corresponding to values of a function at points 
%   generated by ndgrid.
%
%   F should be vectorized in the sense that it may be evaluated at a 
%   tensor of points and returns a tensor in the output.
%
%   ballfun(F, 'eps', ep) specifies ballfuneps to be ep.
%
%   ballfun(F, [A B C D E G]) specifies a cuboid [A B] x [C D] x [E G] 
%   where the function F is defined. A, B, C, D, E and G must all be finite.
%
%   ballfun(F, [m n p]) returns a representation of a trivariate 
%   polynomial of length (m, n, p), i.e., with degree (m-1) in x, degree 
%   (n-1) in y and degree (p-1) in z. The polynomial is compressed in low 
%   trilinear rank form and the trilinear rank (rx, ry, rz) is still 
%   determined adaptively.
%
%   ballfun(F, 'rank', [rx ry rz]) returns a ballfun that is an 
%   approximation to F and has the trilinear rank (rx, ry, rz).
%
%   ballfun(F, 'trig') or ballfun(F, 'periodic') constructs a trig-type 
%   ballfun object if the input function handle F is triply periodic on 
%   [-1, 1] x [-1, 1] x [-1, 1]. In this case, factor quasimatrices of the 
%   low rank format will be represented by Fourier instead of Chebyshev
%   technology.
%
%   If F is a discrete tensor, F = (f_{ijk}), the numbers f_{ijk} are used 
%   as function values at tensor product Chebyshev points of the 2nd kind 
%   generated by ndgrid.
%
%   ballfun(F, 'equi') can be used if F is a discrete tensor of values at 
%   equispaced points in 3D.
% 
%   ballfun(F, 'coeffs') returns a ballfun in which the coefficients of
%   the Chebyshev expansion are the entries of the discrete tensor F.
%
% See also ballfunV and ballfunT.

% Copyright 2016 by The University of Oxford and The Chebfun Developers.
% See http://www.chebfun.org/ for Chebfun information.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% CLASS PROPERTIES:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
properties
    % COLS: Mode-1 fibers, i.e., columns which are functions of x used in 
    % Tucker representation.
    cols
    
    % ROWS: Mode-2 fibers, i.e. rows which are functions of y used in 
    % Tucker representation.
    rows
    
    % TUBES: Mode-3 fibers, i.e. tubes which are functions of z used in 
    % Tucker representation.
    tubes
    
    % CORE: discrete core tensor in Tucker representation
    core
    
    % DOMAIN: box of ballfun, default is [-1, 1] x [-1, 1] x [-1, 1].
    domain
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% CLASS CONSTRUCTOR:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
methods
    function f = ballfun(varargin)
        % The main ballfun constructor!
        
        % Return an empty ballfun:
        if ( (nargin == 0) || isempty(varargin{1}) )
            return
        end
        
        % Call the constructor, all the work is done here:
        f = constructor(f, varargin{:});
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% CLASS METHODS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
methods (Access = public, Static = true)    
    % Outer product of discrete tensors.
    varargout = outerProd(varargin);
    
    % Tensor x matrix.
    varargout = txm(varargin);
    
    % Unfold a discrete tensor to create a matrix.
    varargout = unfold(varargin);
    
    % Reshape a discrete matrix to get a tensor.
    varargout = fold(varargin);
    
    % Convert 3D values to 3D coefficients.
    coeffs3D = vals2coeffs(vals3D);
    
    % Convert 3D coefficients to 3D values.
    vals3D = coeffs2vals(coeffs3D);
        
    % Faster subscripts from linear index.
    varargout = myind2sub(varargin);
    
    % HOSVD of discrete tensors.
    varargout = discreteHOSVD(varargin);
    
end

methods (Access = public)
    % Retrieve and modify preferences for this class.
    varargout = subsref(f, index);
    
    % Get properties of a ballfun object.
    out = get(f, idx);

    % Permute a ballfun.
    out = permute(f, varargin);

    % Evaluate a ballfun.
    out = feval(f, varargin);
        
    % Evaluate at vectors to get a tensor of values.
    out = fevalt(f, varargin);
        
    % Evaluate on a tensor product grid.
    varargout = chebpolyval3(varargin);
    
    % Sample a ballfun on a tensor product grid
    varargout = sample(varargin);
    
    % Tucker rank of a ballfun (i.e., size of the core in each direction).
    varargout = rank(f);
        
    % Length of a ballfun (i.e., the number of Chebyshev or Fourier points
    % at each direction).
    varargout = length(f);

    % Size of a ballfun.
    varargout = size(f, varargin);
        
    % Minimum of a ballfun along one dimension.
    varargout = min(varargin);
    
    % Maximum of a ballfun along one dimension.
    varargout = max(varargin);

    % Minimum of a ballfun along two dimensions.
    varargout = min2(varargin);
    
    % Maximum of a ballfun along two dimensions.
    varargout = max2(varargin);
    
    % Global minimum of a ballfun.
    varargout = min3(f);
    
    % Global maximum of a ballfun.
    varargout = max3(f);
    
    % Global minimum and maximum of a ballfun.
    varargout = minandmax3(f);
    
    % Norm of a ballfun.
    varargout = norm(f, p);    
    
    % Display a ballfun.
    varargout = disp(f, varargin);
    
    % Display a ballfun.
    varargout = display(varargin);
    
    % Simplify a ballfun.
    out = simplify(varargin);
    
    % Vertical scale of a ballfun.
    out = vscale(f);
    
    % Vertical concatenation of ballfun objects.
    out = vertcat(varargin);
    
    % Just one common root of 3 ballfun objects.
    varargout = root(f, g, h); 
        
    % Number of degrees of freedom needed to represent a ballfun.
    out = ndf(f);
    
    % Get the low-rank representation (Tucker expansion) of a ballfun.
    varargout = tucker(f);    

    % Definite integral of a ballfun over the domain in one
    % direction. Output is a Chebfun2 object.
    out = sum(varargin);
    
    % Definite integral of a ballfun over the domain in two directions. 
    % Output is a Chebfun object.
    out = sum2(varargin);

    % Definite integral of a ballfun over its domain.
    out = sum3(f);    

    % Restrict the domain of a ballfun. Output might be a scalar, 
    % a Chebfun, a Chebfun2 or a ballfun object.
    out = restrict(f, varargin);
    
    % Volume of the domain of a ballfun.
    out = domainvolume(f);
    
    % Line integral of a ballfun over a 3D parametric curve.
    out = integral(f, varargin);
    
    % Surface integral of a ballfun over a parametric surface represented 
    % as a CHEBFUN2V.
    out = integral2(f, varargin);
        
    % Integral of a ballfun over a restricted cuboid.
    out = integral3(f, varargin);
    
    % Average or mean value of a ballfun in one direction.
    out = mean(f, varargin);
    
    % Average or mean value of a ballfun in two directions.
    out = mean2(f, varargin);    
    
    % Average or mean value of a ballfun.
    out = mean3(f);
    
    % Standard deviation of a ballfun along one variable.
    out = std(f, varargin);

    % Standard deviation of a ballfun along two variables.
    out = std2(f, varargin);

    % Standard deviation of a ballfun.
    out = std3(f);    
    
    % Squeeze a ballfun into a CHEBFUN2 or a CHEBFUN.
    out = squeeze(f);

    % Create a scatter plot of the core tensor of a ballfun.
    varargout = coreplot(f, varargin);
    
    % Plot a ballfun.
    out = plot(f, varargin);
    
    % Plot slices of a ballfun.
    out = slice(f, varargin);
    
    % Scan plot of a ballfun.
    out = scan(f, varargin);
    
    % Isosurface plot of a ballfun.
    out = isosurface(f, varargin);
    
    % SURF for a ballfun over its domain.
    varargout = surf(f, varargin);
    
    % plotcoeffs of a ballfun.
    varargout = plotcoeffs(f, varargin);
    
    % Tensor of coefficients of a ballfun.
    varargout = chebcoeffs3(f);
    
    % Tensor of coefficients of a ballfun of specified size.
    varargout = coeffs3(f, varargin);
end

methods
    
    % Unary plus for a ballfun.
    out = uplus(f);
    
    % Plus for ballfun objects.
    out = plus(f, g, tol);
    
    % Unary minus for a ballfun.
    out = uminus(f);
    
    % Subtraction of two ballfun objects.
    out = minus(f, g);
    
    % Pointwise multiplication for ballfun objects.
    out = times(f, g);
    
    % Pointwise multiplication for ballfun objects.
    out = mtimes(f, g);
    
    % Pointwise power of a ballfun.
    out = power(varargin);
    
    % Pointwise right divide of ballfun objects.
    out = rdivide(f, g);
    
    % Right divide for ballfun objects.
    out = mrdivide(f, g);
    
    % Pointwise ballfun left array divide.
    out = ldivide(f, g);
    
    % Left divide for ballfun objects.
    out = mldivide(f, g);
    
    % Absolute value of a ballfun.
    out = abs(f);
    
    % Real part of a ballfun.
    out = real(f);
    
    % Imaginary part of a ballfun.
    out = imag(f);
    
    % Complex conjugate of a ballfun.
    out = conj(f);
    
    % Create f + i g for two ballfun objects.
    out = complex(f, g);
    
    % Sine of a ballfun.
    out = sin(f);
    
    % Cosine of a ballfun.
    out = cos(f);
    
    % Tangent of a ballfun.
    out = tan(f);
      
    % Tangent of a ballfun (in degrees).
    out = tand(f);
      
    % Hyperbolic tangent of a ballfun.
    out = tanh(f);
      
    % Exponential of a ballfun.
    out = exp(f);
      
    % Hyperbolic sine of a ballfun.
    out = sinh(f);
      
    % Hyperbolic cosine of a ballfun.
    out = cosh(f);
            
    % Compose command for ballfun objects.
    out = compose(f, varargin);
      
    % Square root of a ballfun.
    out = sqrt(f, varargin);
      
    % Natural logarithm of a ballfun.
    out = log(f, varargin);
      
    % HOSVD of a ballfun.
    varargout = hosvd(f, varargin);
      
    % Test whether a ballfun object is empty.
    out = isempty(f);
      
    % Test if a ballfun is identically zero over its domain.
    varargout = iszero(f);
        
    % Real-valued ballfun test.
    out = isreal(f);

    % Equality test for ballfun objects.
    out = isequal(f, g);
      
    % Partial derivative of a ballfun object.
    out = diff(f, varargin);
      
    % Partial derivative of a ballfun object in the first variable.
    out = diffx(f, varargin);
      
    % Partial derivative of a ballfun object in the second variable.
    out = diffy(f, varargin);
      
    % Partial derivative of a ballfun object in the third variable.
    out = diffz(f, varargin);
      
    % Gradient of a ballfun.
    varargout = grad(f);
      
    % Gradient of a ballfun.
    varargout = gradient(f);
    
    % Normal vector of a ballfun.
    varargout = normal(f, varargin);
    
    % Determinant of Jacobian of three ballfun objects.
    f = jacobian(f, g, h);    
      
    % Laplacian of a ballfun.
    out = lap(f);
      
    % Laplacian of a ballfun.
    out = laplacian(f);
      
    % Biharmonic operator of a ballfun.
    out = biharm(f);
    
    % Biharmonic operator of a ballfun.
    out = biharmonic(f);
    
    % Indefinite integral of a ballfun in one variable.
    out = cumsum(f, varargin);
      
    % Indefinite integral of a ballfun in two variables.
    out = cumsum2(f, varargin);

    % Indefinite integral of a ballfun in all variables.
    out = cumsum3(f);
end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% HIDDEN METHODS:
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    methods ( Hidden = true, Static = false )
    
        % Test if two ballfun objects have the same domain.
        out = domainCheck(f, g);

    end
end