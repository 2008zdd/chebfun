function varargout = expm(N, varargin)
%EXPM      Exponential semigroup of a linear CHEBOP.
%   u = EXPM(L, T, U0) uses matrix exponentiation to propagate an initial
%   condition U0 for time T through the differential equation u' = L*u, where L
%   is a linear CHEBOP. Formally, the solution is given by u(t) = exp(t*L)*u0,
%   where exp(t*L) is a semigroup generated by L.
%
%   The output is a CHEBMATRIX. If T is a vector, then U will have one column
%   for each entry of T. 
%
%   L should have appropriate boundary conditions to make the problem
%   well-posed. Those conditions have zero values; i.e. are represented by
%   B*u(t)=0 for a linear functional B.
%
%   EXPM(..., PREFS) accepts a preference structure or object like that created
%   by CHEBOPPREF.
%
%   EXAMPLE: Heat equation
%      d = [-1 1];  x = chebfun('x', d);
%      A = chebop(@(u) diff(u, 2), [-1, 1], 0);
%      u0 = exp(-20*(x+0.3).^2);  
%      t = [0 0.001 0.01 0.1 0.5 1];
%      u = expm(A, t, u0);
%      colr = zeros(6, 3); colr(:,1) = 0.85.^(0:5)';
%      clf, set(gcf, 'defaultaxescolororder', colr)
%      plot(chebfun(u), 'linewidth', 2)
%
% See also LINOP/EXPM.

% Copyright 2014 by The University of Oxford and The Chebfun Developers. 
% See http://www.chebfun.org/ for Chebfun information.

% Linearize and check whether the chebop is linear:
[L, ignored, fail] = linop(N);

if ( fail )
    error('CHEBOP:expm', ['Chebop appears to be nonlinear.\nCurrently, ', ...
        'EXPM() only has support for linear CHEBOP objects.']);
end

[varargout{1:nargout}] = expm(L, varargin{:});

% Return a CHEBFUN rather than a CHEBMATRIX for scalar problems:
if ( nargout > 1 && isa(varargout{1}, 'chebmatrix') )
    u = varargout{1};
    if ( all(size(u) == [1 1]) )
        u = u{1};
    end
    varargout{1} = u;
end

end
